"""empty message

Revision ID: 11e44d0efe3c
Revises: 
Create Date: 2024-04-03 03:16:13.152518

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '11e44d0efe3c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('course_teacher')
    op.drop_table('group')
    op.drop_table('course')
    op.drop_table('lesson')
    op.drop_table('teacher')
    op.drop_table('course_student')
    op.drop_table('team_student')
    op.drop_table('subgroup')
    op.drop_table('solution')
    op.drop_table('team')
    op.drop_table('lesson_student')
    op.drop_table('user')
    op.drop_table('task')
    op.drop_table('student')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('student',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('student_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subgroup_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['subgroup_id'], ['subgroup.id'], name='student_subgroup_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='student_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('task',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('subject', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('lesson_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['lesson_id'], ['lesson.id'], name='task_lesson_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('second_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('lesson_student',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lesson_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['lesson_id'], ['lesson.id'], name='lesson_student_lesson_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], name='lesson_student_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lesson_student_pkey')
    )
    op.create_table('team',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('team_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('team_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='team_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('solution',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('link', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('pass_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('mark', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='solution_task_id_fkey'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], name='solution_team_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='solution_pkey')
    )
    op.create_table('subgroup',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subgroup_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name='subgroup_group_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='subgroup_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('team_student',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], name='team_student_student_id_fkey'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], name='team_student_team_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='team_student_pkey')
    )
    op.create_table('course_student',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], name='course_student_course_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], name='course_student_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='course_student_pkey')
    )
    op.create_table('teacher',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('teacher_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='teacher_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='teacher_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('lesson',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('subgroup_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], name='lesson_course_id_fkey'),
    sa.ForeignKeyConstraint(['subgroup_id'], ['subgroup.id'], name='lesson_subgroup_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lesson_pkey')
    )
    op.create_table('course',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('course_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='course_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('group',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='group_pkey')
    )
    op.create_table('course_teacher',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], name='course_teacher_course_id_fkey'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teacher.id'], name='course_teacher_teacher_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='course_teacher_pkey')
    )
    # ### end Alembic commands ###
